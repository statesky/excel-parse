
// 插入排序，原理略
public void sort(int[] nums) {

    if (nums.length <=1 ) {
        return;
    }

    for (int i = 1; i < nums.length; i++) {
        int tmp = nums[i];
        int j = i - 1;
        while (j >= 0 && tmp < nums[j]) {
            nums[j + 1] = nums[j];
            j--;
        }
        nums[j + 1] = tmp;
    }
}


// 归并排序
public void mergeSort1(int[] nums, int low, int high) {
    int mid = (low + high) /2;
    if (low < high) {
        mergeSort1(nums, low, mid);
        mergeSort1(nums, mid + 1, high);
        sort(nums, low, mid, high);
    }
}


public void sort(int[] nums, int low, int mid, int high) {
    int[] tmp = new int[high - low + 1];
    int i = low;
    int j = mid + 1;
    int k = 0;
    while (i <= mid && j <= high) {
        if (nums[i] <= nums[j]) {
            tmp[k++] = nums[i++];
        } else {
            tmp[k++] = nums[j++];
        }
    }


    while (i <= mid) {
        tmp[k++] = nums[i++];
    }

    while (j <= high) {
        tmp[k++] = nums[j++];
    }

    int b = 0;
    for (int a = low; a <= high; a++) {
        nums[a] = tmp[b++];
    }
}

// 基数排序
// 新建10个桶，再新建一个计数数组
public static void radixSort(int[] arr) {

}
